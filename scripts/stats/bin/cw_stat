#!/usr/bin/env ruby

# Extract the correct path for loading requirements
path = __FILE__
while File.symlink?(path)
    path = File.expand_path(File.readlink(path), File.dirname(path))
end
$:.unshift(File.join(File.dirname(File.expand_path(path)), '..', 'lib'))

require 'optparse'
require 'cw_stat_collector'

# The command line tool entry point.  Responsible for:
#
# * Parsing CLI options
# * Policing option rules
# * Creating the appropriate CWStatCollector objects
# * Kicking off the stat collection
def main
  options = {
    verbose: false,
    subscribe: false,
  }

  opts = OptionParser.new do |o|
    o.banner = "Usage: cw_stat [options] <hostname> <port> [statname]"
    o.on("-v", "--[no-]verbose", "Run verbosely") do |v|
      options[:verbose] = v
    end

    o.on("-s", "--[no-]subscribe", "Stay subscribed to changes in the statistic") do |s|
      options[:subscribe] = s
    end

    o.on("-h", "--help", "Show this help") do |h|
      puts o
      exit
    end
  end
  opts.parse!

  # Extract and check positional arguments.
  num_positional_args = 3
  hostname = ARGV[0]
  port = ARGV[1]
  statname = ARGV[2]

  if hostname.nil?
    puts "Error: You must specify a host to query\n\n#{opts}"
    exit 1
  end

  if port.nil?
    puts "Error: You must specify a port to query\n\n#{opts}"
    exit 2
  else
    begin
      port_map = port.split(",").map{|x| Integer(x)}
      rescue ArgumentError
        puts "Error: #{port} contains an invalid port number\n\n"
        exit 3
    end
  end

  begin
    stat_collectors = Array.new

    if statname.nil?
      if options[:subscribe]
        puts "Error: Subscription is only supported for single statistics"
        exit 4
      end

      port_map.each do |p|
        stat_collectors += CWStatCollector.all_collectors(hostname, p, options)
      end
    else
      if options[:subscribe] and port_map.length > 1
        puts "Error: Multiple ports aren't supported for subscriptions"
        exit 5
      end

      port_map.each do |p|
        stat_collectors << CWStatCollector.new(hostname, p, statname, options)
      end
    end
  rescue Exception => e
    puts "Error: #{e.message}"
    puts "Error: Terminating due to previous errors"
    exit 6
  end

  begin
    stat_collectors.each do |c|
      c.run
    end
  rescue
    # Errors should have been reported properly already, log a generic error.
    puts "Error: Terminating due to previous errors"
  end
end

main if __FILE__ == $0
